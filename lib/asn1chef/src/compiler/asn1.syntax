extern TypeReference
extern EncodingReference
extern ValueReference
extern Number
extern StringLiteral

rule Program {
    captures {
        modules = repeated: Module
    }
    persist
    soi
    optional repeated {
        modules = Module
    }
    eoi
    return modules
}

rule Module {
    captures {
        header = ModuleHeader
        body = ModuleBody
    }
    header = ModuleHeader
    persist
    body = ModuleBody
    keyword END
}

rule ModuleHeader {
    captures {
        name = TypeReference
        oid = optional: ModuleIdentifier
        encoding_reference = optional: EncodingReference
        tag_default = optional: TagDefault
        extension_default = optional: ExtensionDefault
        exports = optional: Exports
        imports = optional: Imports
    }
    name = TypeReference
    persist
    oid = optional ModuleIdentifier
    keyword DEFINITIONS
    optional {
        encoding_reference = EncodingReference
        keyword INSTRUCTIONS
    }
    tag_default = optional TagDefault
    extension_default = optional ExtensionDefault
    operator ::=
    keyword BEGIN
    exports = optional Exports
    imports = optional Imports
}

rule ModuleBody {
    captures {
        assignments = repeated: Assignment
    }
    repeated {
        assignments = Assignment
    }
    return assignments
}

variant ModuleIdentifier = DefinitiveOidWithIri | DefinitiveOid;

rule DefinitiveOidWithIri {
    captures {
        oid = DefinitiveOid
        iri = StringLiteral
    }
    oid = DefinitiveOid
    iri = StringLiteral
}

rule DefinitiveOid {
    captures {
        components = repeated: DefinitiveOidComponent
    }
    operator {
    persist
    repeated {
        components = DefinitiveOidComponent
    }
    operator }
    return components
}

variant DefinitiveOidComponent = NamedNumber | ValueReference | Number;

rule NamedNumber {
    captures {
        name = ValueReference
        num = Number
    }
    name = ValueReference
    operator (
    persist
    num = Number
    operator )
}

rule NamedNumberList {
    captures {
        nums = repeated: NamedNumber
    }
    operator {
    nums = NamedNumber
    persist
    optional repeated {
        operator ,
        nums = NamedNumber
    }
    operator }
    return nums
}

rule TagDefault {
    captures {
        kind = TagDefaultKind
    }
    kind = TagDefaultKind
    persist
    keyword TAGS
    return kind
}

variant TagDefaultKind = TagDefaultExplicit {
    keyword EXPLICIT
} | TagDefaultImplicit {
    keyword IMPLICIT
} | TagDefaultAutomatic {
    keyword AUTOMATIC
};

variant ExtensionDefault = ExtensibilityImplied {
    keyword EXTENSIBILITY
    keyword IMPLIED
};

rule Exports {
    captures {
        kind = optional: ExportsKind
    }
    keyword EXPORTS
    persist
    kind = optional ExportsKind
    operator ;
    return kind
}

variant ExportsKind = All {
    keyword ALL
} | SymbolList;

rule Imports {
    captures {
        symbols_from_module = repeated: SymbolsFromModule
    }
    keyword IMPORTS
    persist
    optional repeated {
        symbols_from_module = SymbolsFromModule
    }
    operator ;
    return symbols_from_module
}

rule SymbolsFromModule {
    captures {
        symbols = SymbolList
        module = GlobalModuleReference
        selection_option = optional: SelectionOption
    }
    symbols = SymbolList
    keyword FROM
    persist
    module = GlobalModuleReference
    optional {
        selection_option = SelectionOption
    }
}

rule SelectionOption {
    captures {
        kind = SelectionOptionKind
    }
    keyword WITH
    persist
    kind = SelectionOptionKind
    return kind
}

variant SelectionOptionKind = Successors {
    keyword SUCCESSORS
} | Descendants {
    keyword DESCENDANTS
};

variant AssignedIdentifier = DefinitiveOid | ValueIdentifier {
    captures {
        value = DefinedValue
    }
    value = DefinedValue
    // We need to ensure that there is not a comma after the identifier.
    // Take this example from 'RFC1354-MIB.asn':
    // IMPORTS
    //     Gauge, IpAddress
    //             FROM RFC1155-SMI
    //     mib-2, ip
    //             FROM RFC1213-MIB
    // The first module is erroneously parsed as { name = RFC1155-SMI, id = mib-2 },
    // and then the first token available to SymbolList is the comma after mib-2.
    // In order to ensure that the first module is parsed as { name = RFC1155-SMI, id = None },
    // we need to ensure there is not a comma after the `id`.
    not operator ,
    // We also need to make sure that the next token is not the keyword FROM.
    // Take this example from 'SIP-COMMON-MIB.asn':
    // IMPORTS
    // ...
    // SipTCTransportProtocol,
    // SipTCMethodName,
    // SipTCEntityRole,
    // SipTCOptionTagHeaders
    //       FROM SIP-TC-MIB             -- RFC 4780
    // applIndex
    //       FROM NETWORK-SERVICES-MIB   -- RFC 2788
    // The first module is erroneously parsed as { name = SIP-TC-MIB, id = applIndex },
    // and then the first token available to SymbolList is the FROM before NETWORK-SERVICES-MIB.
    // In order to ensure that the first module is parsed as { name = SIP-TC-MIB, id = None },
    // we need to ensure that there is not a FROM after the `id`.
    not keyword FROM
    return value
};

rule GlobalModuleReference {
    captures {
        name = TypeReference
        oid = optional: AssignedIdentifier
    }
    name = TypeReference
    optional {
        oid = AssignedIdentifier
    }
}

variant Oid = ObjectIdentifierValue | DefinedValue;

rule ObjectIdentifierValue {
    captures {
        components = repeated: ObjectIdentifierComponent
    }
    operator {
    components = ObjectIdentifierComponent
    persist
    optional repeated {
        components = ObjectIdentifierComponent
    }
    operator }
}

variant ObjectIdentifierComponent = NamedNumber | DefinedValue | ValueReference | Number;

rule DefinedValue {
    captures {
        external_module = optional: TypeReference
        value = ValueReference
    }
    optional {
        external_module = TypeReference
        operator .
    }
    value = ValueReference 
}


rule SymbolList {
    captures {
        symbols = repeated: Symbol
    }
    symbols = Symbol
    persist
    optional repeated {
        operator ,
        symbols = Symbol
    }
    return symbols
}

variant Symbol = ParameterizedReference | Reference;

rule ParameterizedReference {
    captures {
        reference = Reference
    }
    reference = Reference
    operator {
    persist
    operator }
    return reference
}

variant Reference = TypeReference | ValueReference;

variant Assignment = TypeAssignment | ValueAssignment;

rule TypeAssignment {
    captures {
        name = TypeReference
        ty = Type
    }
    name = TypeReference
    operator ::=
    persist
    ty = Type
}

variant Constant = IntegerValue | DefinedValue;

rule ConstantSeries {
    captures {
        constants = repeated: Constant
    }
    constants = Constant
    persist
    optional repeated {
        operator |
        constants = Constant
    }
    return constants
}

variant RangeLowerBound = Min {
    keyword MIN
} | GtConstant {
    captures {
        constant = Constant
    }
    constant = Constant
    operator <
    return constant
} | Constant;

variant RangeUpperBound = Max {
    keyword MAX
} | LtConstant {
    captures {
        constant = Constant
    }
    operator <
    persist
    constant = Constant
    return constant
} | Constant;

rule Range {
    captures {
        lower = RangeLowerBound
        upper = RangeUpperBound
    }
    lower = RangeLowerBound
    operator ..
    persist
    upper = RangeUpperBound
}

variant Constraint = Extensible {
    operator ...
} | Range | ConstantSeries;

rule Constraints {
    captures {
        constraints = repeated: Constraint
    }
    operator (
    constraints = Constraint
    persist
    optional repeated {
        operator ,
        constraints = Constraint
    }
    operator )
}

rule Integer {
    captures {
        value_constraints = optional: Constraints
        named_values = optional: NamedNumberList
    }
    keyword INTEGER
    persist
    optional {
        value_constraints = Constraints
    }
    optional {
        named_values = NamedNumberList
    }
}

rule SizeConstraints {
    captures {
        constraints = Constraints
    }
    operator (
    keyword SIZE
    persist
    constraints = Constraints
    operator )
    return constraints
}

rule BitString {
    captures {
        size_constraints = optional: SizeConstraints
        named_bits = optional: NamedNumberList
    }
    keyword BIT
    keyword STRING
    persist
    optional {
        size_constraints = SizeConstraints
    }
    optional {
        named_bits = NamedNumberList
    }
}

rule OctetString {
    captures {
        size_constraints = optional: SizeConstraints
    }
    keyword OCTET
    keyword STRING
    persist
    optional {
        size_constraints = SizeConstraints
    }
}

rule Sequence {
    captures {
        components = repeated: StructureComponent
    }
    keyword SEQUENCE
    persist
    operator {
    optional {
        components = StructureComponent
    }
    optional repeated {
        operator ,
        components = StructureComponent
    }
    operator }
}

rule StructureComponent {
    captures {
        name = ValueReference
        ty = Type
        default = optional: Value
        optional = optional: Optional
    }
    name = ValueReference
    ty = Type
    persist
    optional {
        keyword DEFAULT
        default = Value
    }
    optional {
        optional = Optional
    }
}

rule Optional {
    keyword OPTIONAL
}

variant BuiltinType = BitString | OctetString | Integer | Sequence | ObjectIdentifier {
    keyword OBJECT
    keyword IDENTIFIER
};

variant Class = Universal {
    keyword UNIVERSAL
} | Application {
    keyword APPLICATION
} | Private {
    keyword PRIVATE
};

rule Tag {
    captures {
        encoding_reference = optional: EncodingReference
        class = optional: Class
        class_number = Number
    }
    operator [
    persist
    optional {
        encoding_reference = EncodingReference
        operator :
    }
    optional {
        class = Class
    }
    class_number = Number
    operator ]
}

variant TagKind = TagKindImplicit {
    keyword IMPLICIT
} | TagKindExplicit {
    keyword EXPLICIT
};

rule TaggedType {
    captures {
        tag = Tag
        kind = optional: TagKind
        ty = boxed UntaggedType
    }
    tag = Tag
    persist
    optional {
        kind = TagKind
    }
    ty = UntaggedType
}

variant UntaggedType = BuiltinType | TypeReference;

variant Type = TaggedType | UntaggedType;

rule ValueAssignment {
    captures {
        name = ValueReference
        ty = Type
        value = Value
    }
    name = ValueReference
    ty = Type
    persist
    operator ::=
    value = Value
}

rule SequenceValue {
    captures {
        components = repeated: SequenceValueComponent
    }
    operator {
    components = SequenceValueComponent
    optional repeated {
        operator ,
        components = SequenceValueComponent
    }
    operator }
}

rule SequenceValueComponent {
    captures {
        name = ValueReference
        value = Value
    }
    name = ValueReference
    value = Value
}

rule ChoiceValue {
    captures {
        alternative = ValueReference
        value = boxed Value
    }
    alternative = ValueReference
    operator :
    persist
    value = Value
}

rule Negative {
    operator -
}

rule IntegerValue {
    captures {
        sign = optional: Negative
        value = Number
    }
    optional {
        sign = Negative
    }
    value = Number
}

variant BuiltinValue = StringLiteral | IntegerValue | SequenceValue | ObjectIdentifierValue | ChoiceValue;

variant Value = BuiltinValue | ValueReference;
