extern TypeReference
extern UppercaseReference
extern ValueReference
extern Number
extern StringLiteral
extern BracedTokenStream
extern SyntaxTokenLiteral

rule Program {
    captures {
        modules = repeated: Module
    }
    persist
    soi
    optional repeated {
        modules = Module
    }
    eoi
    return modules
}

rule Module {
    captures {
        header = ModuleHeader
        body = ModuleBody
    }
    header = ModuleHeader
    persist
    body = ModuleBody
    keyword END
}

rule ModuleHeader {
    captures {
        name = TypeReference
        oid = optional: ModuleIdentifier
        encoding_reference = optional: UppercaseReference
        tag_default = optional: TagDefault
        extensibility_implied = optional: ExtensibilityImplied
        exports = optional: Exports
        imports = optional: Imports
    }
    name = TypeReference
    persist
    oid = optional ModuleIdentifier
    keyword DEFINITIONS
    optional {
        encoding_reference = UppercaseReference
        keyword INSTRUCTIONS
    }
    tag_default = optional TagDefault
    optional {
        extensibility_implied = ExtensibilityImplied
    }
    operator ::=
    keyword BEGIN
    exports = optional Exports
    imports = optional Imports
}

rule ModuleBody {
    captures {
        assignments = repeated: Assignment
    }
    repeated {
        assignments = Assignment
    }
    return assignments
}

variant ModuleIdentifier = DefinitiveOidWithIri | DefinitiveOid | error { "expecting module identifier" };

rule DefinitiveOidWithIri {
    captures {
        oid = DefinitiveOid
        iri = StringLiteral
    }
    oid = DefinitiveOid
    iri = StringLiteral
}

rule DefinitiveOid {
    captures {
        components = repeated: DefinitiveOidComponent
    }
    operator {
    persist
    repeated {
        components = DefinitiveOidComponent
    }
    operator }
    return components
}

variant DefinitiveOidComponent = NamedNumber | ValueReference | Number | error { "expecting a named number, number literal, or valuereference" };

rule NamedNumber {
    captures {
        name = ValueReference
        num = IntegerValueReference
    }
    name = ValueReference
    operator (
    persist
    num = IntegerValueReference
    operator )
}

rule NamedNumberList {
    captures {
        nums = repeated: NamedNumber
    }
    operator {
    nums = NamedNumber
    persist
    optional repeated {
        operator ,
        nums = NamedNumber
    }
    operator }
    return nums
}

rule TagDefault {
    captures {
        kind = TagDefaultKind
    }
    kind = TagDefaultKind
    persist
    keyword TAGS
    return kind
}

variant TagDefaultKind = TagDefaultExplicit {
    keyword EXPLICIT
} | TagDefaultImplicit {
    keyword IMPLICIT
} | TagDefaultAutomatic {
    keyword AUTOMATIC
} | error { "expecting tag default (AUTOMATIC, IMPLICIT, or EXPLICIT)" };

rule ExtensibilityImplied {
    keyword EXTENSIBILITY
    keyword IMPLIED
}

rule Exports {
    captures {
        kind = optional: ExportsKind
    }
    keyword EXPORTS
    persist
    kind = optional ExportsKind
    operator ;
    return kind
}

variant ExportsKind = All {
    keyword ALL
} | SymbolList | error { "expecting a symbol list or ALL" };

rule Imports {
    captures {
        symbols_from_module = repeated: SymbolsFromModule
    }
    keyword IMPORTS
    persist
    optional repeated {
        symbols_from_module = SymbolsFromModule
    }
    operator ;
    return symbols_from_module
}

rule SymbolsFromModule {
    captures {
        symbols = SymbolList
        module = GlobalModuleReference
        selection_option = optional: SelectionOption
    }
    symbols = SymbolList
    keyword FROM
    persist
    module = GlobalModuleReference
    optional {
        selection_option = SelectionOption
    }
}

rule SelectionOption {
    captures {
        kind = SelectionOptionKind
    }
    keyword WITH
    persist
    kind = SelectionOptionKind
    return kind
}

variant SelectionOptionKind = Successors {
    keyword SUCCESSORS
} | Descendants {
    keyword DESCENDANTS
} | error { "expecting SUCCESSORS or DESCENDANTS" };

variant AssignedIdentifier = DefinitiveOid | ValueIdentifier {
    captures {
        value = DefinedValue
    }
    value = DefinedValue
    // We need to ensure that there is not a comma after the identifier.
    // Take this example from 'RFC1354-MIB.asn':
    // IMPORTS
    //     Gauge, IpAddress
    //             FROM RFC1155-SMI
    //     mib-2, ip
    //             FROM RFC1213-MIB
    // The first module is erroneously parsed as { name = RFC1155-SMI, id = mib-2 },
    // and then the first token available to SymbolList is the comma after mib-2.
    // In order to ensure that the first module is parsed as { name = RFC1155-SMI, id = None },
    // we need to ensure there is not a comma after the `id`.
    not operator ,
    // We also need to make sure that the next token is not the keyword FROM.
    // Take this example from 'SIP-COMMON-MIB.asn':
    // IMPORTS
    // ...
    // SipTCTransportProtocol,
    // SipTCMethodName,
    // SipTCEntityRole,
    // SipTCOptionTagHeaders
    //       FROM SIP-TC-MIB             -- RFC 4780
    // applIndex
    //       FROM NETWORK-SERVICES-MIB   -- RFC 2788
    // The first module is erroneously parsed as { name = SIP-TC-MIB, id = applIndex },
    // and then the first token available to SymbolList is the FROM before NETWORK-SERVICES-MIB.
    // In order to ensure that the first module is parsed as { name = SIP-TC-MIB, id = None },
    // we need to ensure that there is not a FROM after the `id`.
    not keyword FROM
    return value
} | error { "expecting an object identifier or a valuereference" };

rule GlobalModuleReference {
    captures {
        name = TypeReference
        oid = optional: AssignedIdentifier
    }
    name = TypeReference
    optional {
        oid = AssignedIdentifier
    }
}

variant Oid = ObjectIdentifierValue | DefinedValue | error { "expecting an object identifier or a valuereference" };

rule ObjectIdentifierValue {
    captures {
        components = repeated: ObjectIdentifierComponent
    }
    operator {
    components = ObjectIdentifierComponent
    persist
    optional repeated {
        components = ObjectIdentifierComponent
    }
    operator }
}

variant ObjectIdentifierComponent = NamedNumber | DefinedValue | Number |
    error { "expecting a named number, number literal, or a valuereference" };

rule DefinedValue {
    captures {
        external_module = optional: TypeReference
        value = ValueReference
    }
    optional {
        external_module = TypeReference
        operator .
    }
    value = ValueReference 
}

rule DefinedType {
    captures {
        external_module = optional: DefinedTypeModule
        ty = TypeReference
    }
    optional {
        external_module = DefinedTypeModule
    }
    ty = TypeReference 
}

rule DefinedTypeModule {
    captures {
        external_module = TypeReference
    }
    external_module = TypeReference
    operator .
    return external_module
}

rule SymbolList {
    captures {
        symbols = repeated: Symbol
    }
    symbols = Symbol
    persist
    optional repeated {
        operator ,
        symbols = Symbol
    }
    return symbols
}

variant Symbol = ParameterizedReference | Reference | error { "expecting a symbol (reference or parameterized reference)" };

rule ParameterizedReference {
    captures {
        reference = Reference
    }
    reference = Reference
    operator {
    persist
    operator }
    return reference
}

variant Reference = TypeReference | ValueReference | error { "expecting a typereference or a valuereference" };

variant Assignment = ObjectSetAssignment | TypeAssignment | ValueAssignment | error { "expecting a type, value, or information object set assignment" };

rule ParameterDeclList {
    captures {
        parameters = repeated: ParameterDecl
    }
    operator {
    persist
    parameters = ParameterDecl
    optional repeated {
        operator ,
        parameters = ParameterDecl
    }
    operator }
    return parameters
}

variant ParameterDecl = ObjectSetParameterDecl {
    captures {
        class_type = UppercaseReference
        name = TypeReference
    }
    class_type = UppercaseReference
    operator :
    name = TypeReference
} | ValueParameterDecl | TypeParameterDecl | error { "expecting a type, value, or information object set parameter declaration" };

rule ValueParameterDecl {
    captures {
        ty = Type
        name = ValueReference
    }
    ty = Type
    operator :
    name = ValueReference
}

rule TypeParameterDecl {
    captures {
        name = TypeReference
    }
    name = TypeReference
    return name
}

rule TypeAssignment {
    captures {
        name = TypeReference
        parameters = optional: ParameterDeclList
        subject = TypeAssignmentSubject
    }
    name = TypeReference
    optional {
        parameters = ParameterDeclList
    }
    operator ::=
    persist
    subject = TypeAssignmentSubject
}

variant TypeAssignmentSubject = TypeIdentifier {
    keyword TYPE-IDENTIFIER
} | AbstractSyntax {
    keyword ABSTRACT-SYNTAX
} | InformationObjectClass | Type | error { "expecting a type or class declaration" };

rule Constraint {
    captures {
        constraint = SubtypeConstraint
    }
    operator (
    persist
    constraint = SubtypeConstraint
    persist
    operator )
    return constraint
}

rule SubtypeConstraint {
    captures {
        element_sets = repeated: ConstraintElement
    }
    persist
    element_sets = ConstraintElement
    optional repeated {
        operator ,
        element_sets = ConstraintElement
    }
}

variant ConstraintElement = Extensible | SubtypeElementSet | error { "expecting constraint element or '...'" };

variant ConstraintOperator = Union {
    operator |
} | KeywordUnion {
    keyword UNION
} | Intersection {
    operator ^
} | KeywordIntersection {
    keyword INTERSECTION
};

rule SubtypeElementSet {
    captures {
        elements = repeated: SubtypeElement
        operators = repeated: ConstraintOperator
    }
    elements = SubtypeElement
    persist
    optional repeated {
        operators = ConstraintOperator
        elements = SubtypeElement
    }
}

variant SubtypeElement = SubtypeElementGroup {
    captures {
        group = boxed SubtypeElementSet
    }
    operator (
    persist
    group = SubtypeElementSet
    operator )
    return group
} | UserDefinedConstraint | TableConstraint | ContentsConstraint | InnerTypeConstraints | SizeConstraint | ValueRangeConstraint {
    captures {
        lower = RangeLowerBound
        upper = RangeUpperBound
    }
    lower = RangeLowerBound
    operator ..
    persist
    upper = RangeUpperBound
} | SingleValueConstraint {
    captures {
        value = Value
    }
    value = Value
    return value
} | ContainedSubtype {
    captures {
        ty = Type
    }
    optional {
        keyword INCLUDES
    }
    ty = Type
    return ty
} | error { "expecting a constraint" };

rule TableConstraint {
    captures {
        set_name = DefinedType
        component_ref = optional: ComponentReference
    }
    operator {
    set_name = DefinedType
    persist
    operator }
    optional {
        component_ref = ComponentReference
    }
}

rule ComponentReference {
    captures {
        relative = bool 
        elements = repeated: ValueReference
    }
    operator {
    persist
    operator @
    optional {
        operator .
        relative = true
    }
    elements = ValueReference
    optional repeated {
        operator .
        elements = ValueReference
    }
    operator }
}

variant ContentsConstraint = EncodedBy {
    captures {
        ty = Type
        value = Value
    }
    keyword CONTAINING
    ty = Type
    keyword ENCODED
    persist
    keyword BY
    value = Value
} | Containing {
    captures {
        ty = Type
    }
    keyword CONTAINING
    ty = Type
    return ty
} | error { "expecting 'CONTAINING ...' or 'CONTAINING ... ENCODED BY ...'" };

rule UserDefinedConstraint {
    captures {
        parameters = repeated: UserDefinedConstraintParameter
    }
    keyword CONSTRAINED
    persist
    keyword BY
    operator {
    optional {
        parameters = UserDefinedConstraintParameter
    }
    optional repeated {
        operator ,
        parameters = UserDefinedConstraintParameter
    }
    operator }
}

variant UserDefinedConstraintParameter = ValueParameterDecl | Type;

rule SizeConstraint {
    captures {
        constraint = Constraint
    }
    keyword SIZE
    persist
    constraint = Constraint
    return constraint
}

variant RangeLowerBound = Min {
    keyword MIN
} | GtValue {
    captures {
        value = Value
    }
    value = Value
    operator <
    return value
} | Value | error { "expecting a range lower bound" };

variant RangeUpperBound = Max {
    keyword MAX
} | LtValue {
    captures {
        value = Value
    }
    operator <
    persist
    value = Value
    return value
} | Value | error { "expecting a range upper bound" };

rule InnerTypeConstraints {
    captures {
        spec = TypeConstraintSpec
    }
    keyword WITH
    persist
    keyword COMPONENTS
    spec = TypeConstraintSpec
    return spec
}

variant TypeConstraintSpec = FullSpec {
    captures {
        constraints = TypeConstraints
    }
    operator {
    constraints = TypeConstraints
    persist
    operator }
    return constraints
} | PartialSpec {
    captures {
        constraints = TypeConstraints
    }
    operator {
    operator ...
    persist
    operator ,
    constraints = TypeConstraints
    operator }
    return constraints
} | error { "expecting a type constraint" };

rule TypeConstraints {
    captures {
        constraints = repeated: NamedConstraint
    }
    constraints = NamedConstraint
    persist
    optional repeated {
        operator ,
        constraints = NamedConstraint
    }
    return constraints
}

rule NamedConstraint {
    captures {
        name = ValueReference
        constraint = ComponentConstraint
    }
    name = ValueReference
    persist
    constraint = ComponentConstraint
}

rule ComponentConstraint {
    captures {
        value = optional: Constraint
        presence = optional: PresenceConstraint
    }
    optional {
        value = Constraint
    }
    optional {
        presence = PresenceConstraint
    }
}

variant PresenceConstraint = PresencePresent {
    keyword PRESENT
} | PresenceAbsent {
    keyword ABSENT
} | PresenceOptional {
    keyword OPTIONAL
} | error { "expecting PRESENT, ABSENT, or OPTIONAL" };

rule Any {
    captures {
        defined_by = optional: boxed Value
    }
    keyword ANY
    persist
    optional {
        keyword DEFINED
        keyword BY
        defined_by = Value
    }
}

rule Boolean {
    keyword BOOLEAN
}

rule Integer {
    captures {
        named_values = optional: NamedNumberList
    }
    keyword INTEGER
    persist
    optional {
        named_values = NamedNumberList
    }
}

rule BitString {
    captures {
        named_bits = optional: NamedNumberList
    }
    keyword BIT
    persist
    keyword STRING
    optional {
        named_bits = NamedNumberList
    }
}

rule OctetString {
    keyword OCTET
    persist
    keyword STRING
}

rule Null {
    keyword NULL
}

rule ObjectIdentifier {
    keyword OBJECT
    persist
    keyword IDENTIFIER
}

rule ObjectDescriptor {
    keyword ObjectDescriptor
}

rule External {
    keyword EXTERNAL
}

rule Real {
    keyword REAL
}

rule EnumerationItem {
    captures {
        name = ValueReference
        num = optional: Value
    }
    name = ValueReference
    persist
    optional {
        operator (
        num = Value
        operator )
    }
}

rule Enumerated {
    captures {
        items = repeated: EnumerationItem
        extensible = bool
    }
    keyword ENUMERATED
    persist
    operator {
    items = EnumerationItem
    optional repeated {
        operator ,
        items = EnumerationItem
    }
    optional {
        operator ,
        operator ...
        extensible = true
    }
    operator }
    return items
}

rule EmbeddedPDV {
    keyword EMBEDDED
    persist
    keyword PDV
}

rule UTF8String {
    keyword UTF8String
}

rule RelativeOid {
    keyword RELATIVE-OID
}

rule Time {
    keyword TIME
}

variant StructureKind = Sequence {
    keyword SEQUENCE
} | Set {
    keyword SET
} | error { "expecting SEQUENCE or SET" };

rule Structure {
    captures {
        kind = StructureKind
        component_groups = repeated: StructureComponentGroup
        extensible = bool
    }
    kind = StructureKind
    operator {
    persist
    optional {
        component_groups = StructureComponentGroup
    }
    optional repeated {
        operator ,
        component_groups = StructureComponentGroup
    }
    optional {
        operator ,
        operator ...
        extensible = true
    }
    operator }
}

variant ConstraintOrSizeConstraint = Constraint | SizeConstraint | error { "expecting constraint or SIZE(...)" };

rule StructureOf {
    captures {
        kind = StructureKind
        constraint = optional: ConstraintOrSizeConstraint
        ty = boxed Type
    }
    kind = StructureKind
    optional {
        constraint = ConstraintOrSizeConstraint
    }
    keyword OF
    persist
    ty = Type
}

rule Extensible {
    operator ...
}

variant StructureComponentGroup = Extensible | ComponentExtensionGroup {
    captures {
        version = optional: Number
        components = repeated: StructureComponent
    }
    operator [[
    persist
    optional {
        version = Number
        operator :
    }
    components = StructureComponent
    optional repeated {
        operator ,
        components = StructureComponent
    }
    operator ]]
} | StructureComponent;

rule StructureComponent {
    captures {
        name = ValueReference
        ty = Type
        default = optional: Value
        optional = bool
    }
    name = ValueReference
    ty = Type
    persist
    optional {
        keyword DEFAULT
        default = Value
    }
    optional {
        keyword OPTIONAL
        optional = true
    }
}

rule ObjectClassFieldType {
    captures {
        class_type = UppercaseReference
        field = FieldReference
    }
    class_type = UppercaseReference
    operator .
    persist
    field = FieldReference
}

rule Choice {
    captures {
        alternatives = repeated: ChoiceAlternative
        extensible = bool
    }
    keyword CHOICE
    persist
    operator {
    alternatives = ChoiceAlternative
    optional repeated {
        operator ,
        alternatives = ChoiceAlternative
    }
    optional {
        operator ,
        operator ...
        extensible = true
    }
    operator }
    return alternatives
}

rule ChoiceAlternative {
    captures {
        name = ValueReference
        ty = Type
    }
    name = ValueReference
    persist
    ty = Type
}

rule NumericString {
    keyword NumericString
}

rule PrintableString {
    keyword PrintableString
}

rule TeletexString {
    keyword TeletexString
}

rule VideotexString {
    keyword VideotexString
}

rule IA5String {
    keyword IA5String
}

rule UTCTime {
    keyword UTCTime
}

rule GeneralizedTime {
    keyword GeneralizedTime
}

rule GraphicString {
    keyword GraphicString
}

rule VisibleString {
    keyword VisibleString
}

rule GeneralString {
    keyword GeneralString
}

rule UniversalString {
    keyword UniversalString
}

rule CharacterString {
    keyword CHARACTER
    keyword STRING
}

rule BMPString {
    keyword BMPString
}

rule Date {
    keyword DATE
}

rule TimeOfDay {
    keyword TIME-OF-DAY
}

rule DateTime {
    keyword DATE-TIME
}

rule Duration {
    keyword DURATION
}

rule InstanceOf {
    captures {
        class_type = UppercaseReference
    }
    keyword INSTANCE
    persist
    keyword OF
    class_type = UppercaseReference
}

variant BuiltinType = Any | Boolean | Integer | BitString | OctetString | Null | ObjectIdentifier | ObjectDescriptor | External |
    Real | Enumerated | EmbeddedPDV | UTF8String | RelativeOid | Time | Structure | Choice | NumericString | PrintableString |
    TeletexString | VideotexString | IA5String | UTCTime |  GeneralizedTime | GraphicString | VisibleString | GeneralString |
    UniversalString | CharacterString | BMPString | Date | TimeOfDay | DateTime | Duration | InstanceOf | 
    error { "expecting UNIVERSAL type" };

variant Class = Universal {
    keyword UNIVERSAL
} | Application {
    keyword APPLICATION
} | Private {
    keyword PRIVATE
};

rule Tag {
    captures {
        encoding_reference = optional: UppercaseReference
        class = optional: Class
        class_number = Number
    }
    operator [
    persist
    optional {
        encoding_reference = UppercaseReference
        operator :
    }
    optional {
        class = Class
    }
    class_number = Number
    operator ]
}

variant TagKind = TagKindImplicit {
    keyword IMPLICIT
} | TagKindExplicit {
    keyword EXPLICIT
};

rule TaggedType {
    captures {
        tag = Tag
        kind = optional: TagKind
        ty = boxed ConstrainedType
    }
    tag = Tag
    persist
    optional {
        kind = TagKind
    }
    ty = ConstrainedType
}

variant ConstrainedType = Suffixed {
    captures {
        ty = UntaggedType
        constraint = optional: Constraint
    }
    ty = UntaggedType
    persist
    optional {
        constraint = Constraint
    }
} | TypeWithConstraint {
    captures {
        ty = StructureOf
    }
    ty = StructureOf
    return ty
};

rule ParameterizedDefinedType {
    captures {
        name = DefinedType
        parameters = ParameterList
    }
    name = DefinedType
    parameters = ParameterList
}

rule ParameterList {
    captures {
        parameters = repeated: Parameter
    }
    operator {
    persist
    parameters = Parameter
    optional repeated {
        operator ,
        parameters = Parameter
    }
    operator }
    return parameters
}

variant Parameter = ObjectSetParameter {
    captures {
        object_set = DefinedType
    }
    operator {
    persist
    object_set = DefinedType
    operator }
    return object_set
} | TypeParameter {
    captures {
        ty = Type
    }
    ty = Type
    return ty
} | ValueParameter {
    captures {
        value = Value
    }
    value = Value
    return value
} | error { "expecting type, value, or information object set parameter" };

variant UntaggedType = BuiltinType | ObjectClassFieldType | ParameterizedDefinedType | DefinedType | error { "expecting type" };

variant Type = TaggedType | ConstrainedType | error { "expecting tagged or untagged type" };

rule ValueAssignment {
    captures {
        name = ValueReference
        ty = Type
        value = Value
    }
    name = ValueReference
    ty = Type
    persist
    operator ::=
    value = Value
}

rule ObjectSetAssignment {
    captures {
        name = TypeReference
        ty = UppercaseReference
        subject = ObjectSetAssignmentSubject
    }
    name = TypeReference
    ty = UppercaseReference
    operator ::=
    subject = ObjectSetAssignmentSubject
}

variant ObjectSetAssignmentSubject = EmptyExtensible {
    operator {
    operator ...
    persist
    operator }
} | ObjectSet {
    captures {
        element_groups = repeated: ObjectSetElementGroup
        extensible = bool
    }
    operator {
    element_groups = ObjectSetElementGroup
    persist
    optional repeated {
        operator ,
        element_groups = ObjectSetElementGroup
    }
    optional {
        operator ,
        operator ...
        extensible = true
    }
    operator }
} | error { "expecting object set definition" };

variant ObjectSetElementGroup = Extensible | ObjectSetElements {
    captures {
        elements = repeated: ObjectSetElement
    }
    elements = ObjectSetElement
    optional repeated {
        operator |
        elements = ObjectSetElement
    }
    return elements
} | error { "expecting objects or '...'" };

variant ObjectSetElement = ObjectFieldReference | Object | DefinedType | error { "expecting object or object set" };

rule ValueSet {
    captures {
        element_groups = repeated: ValueSetElementGroup
        extensible = bool
    }
    operator {
    element_groups = ValueSetElementGroup
    persist
    optional repeated {
        operator ,
        element_groups = ValueSetElementGroup
    }
    optional {
        operator ,
        operator ...
        extensible = true
    }
    operator }
}

variant ValueSetElementGroup = Extensible | ValueSetElements {
    captures {
        elements = repeated: Value
    }
    elements = Value
    optional repeated {
        operator |
        elements = Value
    }
    return elements
} | error { "expecting values or '...'" };

rule NamedBitStringValue {
    captures {
        bits = repeated: ValueReference
    }
    operator {
    optional {
        bits = ValueReference
    }
    optional repeated {
        operator ,
        bits = ValueReference
    }
    operator }
    return bits
}

rule StructureValue {
    captures {
        components = repeated: StructureValueComponent
    }
    operator {
    optional {
        components = StructureValueComponent
    }
    optional repeated {
        operator ,
        components = StructureValueComponent
    }
    operator }
}

rule StructureValueComponent {
    captures {
        name = ValueReference
        value = Value
    }
    name = ValueReference
    value = Value
}

rule StructureOfValue {
    captures {
        elements = repeated: Value
    }
    operator {
    optional {
        elements = Value
    }
    optional repeated {
        operator ,
        elements = Value
    }
    operator }
    return elements
}

rule ChoiceValue {
    captures {
        alternative = ValueReference
        value = boxed Value
    }
    alternative = ValueReference
    operator :
    persist
    value = Value
}

rule OpenTypeValue {
    captures {
        open_type = OpenTypeValueTypeReference
        value = boxed Value
    }
    open_type = OpenTypeValueTypeReference
    operator :
    persist
    value = Value
}

variant OpenTypeValueTypeReference = ObjectFieldReference | Type | error { "expecting type or field reference" };

rule Negative {
    operator -
}

rule IntegerValue {
    captures {
        sign = optional: Negative
        value = Number
    }
    optional {
        sign = Negative
    }
    value = Number
}

rule DecimalValue {
    captures {
        sign = optional: Negative
        whole = Number
        fraction = Number
    }
    optional {
        sign = Negative
    }
    whole = Number
    operator .
    persist
    fraction = Number
}

variant BooleanValue = True {
    keyword TRUE
} | False {
    keyword FALSE
} | error { "expecting TRUE or FALSE" };

variant SpecialRealValue = PlusInfinity {
    keyword PLUS-INFINITY
} | MinusInfinity {
    keyword MINUS-INFINITY
} | NotANumber {
    keyword NOT-A-NUMBER
} | error { "expecting PLUS-INFINITY, MINUS-INFINITY, or NOT-A-NUMBER" };

rule ContainingValue {
    captures {
        value = boxed Value
    }
    keyword CONTAINING
    persist
    value = Value
    return value
}

variant BuiltinValue = ContainingValue | OpenTypeValue | ObjectFieldReference | Null | BooleanValue | SpecialRealValue | StringLiteral |
                    DecimalValue | IntegerValue | ChoiceValue | BracedTokenStream | error { "expecting UNIVERSAL value" };

variant Value = BuiltinValue | DefinedValue | error { "expecting UNIVERSAL value or valuereference" };
variant IntegerValueReference = IntegerValue | DefinedValue | error { "expecting INTEGER value or valuereference" };

rule InformationObjectClass {
    captures {
        fields = repeated: ObjectClassField
        syntax = SyntaxList
    }
    keyword CLASS
    persist
    operator {
    fields = ObjectClassField
    optional repeated {
        operator ,
        fields = ObjectClassField
    }
    operator }
    keyword WITH
    keyword SYNTAX
    syntax = SyntaxList
}

variant ObjectClassField = ValueField | SetField | TypeField | error { "expecting open type, value, or object set field" };

rule TypeField {
    captures {
        name = TypeFieldReference
        optional = bool
    }
    name = TypeFieldReference
    persist
    optional {
        keyword OPTIONAL
        optional = true
    }
}

rule SetField {
    captures {
        name = TypeFieldReference
        element_type = Type
        default = optional: BracedTokenStream
        optional = bool
    }
    name = TypeFieldReference
    element_type = Type
    optional {
        keyword OPTIONAL
        optional = true
    }
    optional {
        keyword DEFAULT
        default = BracedTokenStream
    }
}

rule ValueField {
    captures {
        name = ValueFieldReference
        subject = ValueFieldSubject
        default = optional: Value
        optional = bool
        unique = bool
    }
    name = ValueFieldReference
    persist
    subject = ValueFieldSubject
    optional {
        keyword DEFAULT
        default = Value
    }
    optional {
        keyword OPTIONAL
        optional = true
    }
    optional {
        keyword UNIQUE
        unique = true
    }
}

variant ValueFieldSubject = OpenTypeReference {
    captures {
        open_type_ref = TypeFieldReference
    }
    open_type_ref = TypeFieldReference
    return open_type_ref
} | Type | error { "expecting value field" };

rule TypeFieldReference {
    captures {
        name = TypeReference
    }
    operator &
    name = TypeReference
    return name
}

rule ValueFieldReference {
    captures {
        name = ValueReference
    }
    operator &
    name = ValueReference
    return name
}

variant FieldReference = TypeFieldReference | ValueFieldReference | error { "expecting field reference" };

rule SyntaxList {
    captures {
        elements = repeated: SyntaxListElement
    }
    operator {
    persist
    repeated {
        elements = SyntaxListElement
    }
    operator }
}

variant SyntaxListElement = OptionalSyntaxElement {
    captures {
        elements = repeated: SyntaxListElement
    }
    single-operator [
    persist
    repeated {
        elements = SyntaxListElement
    }
    single-operator ]
    return elements
} | RequiredSyntaxElement {
    captures {
        item = SyntaxItem
    }
    item = SyntaxItem
    return item
} | error { "expecting syntax list element" };

variant SyntaxItem = FieldReference | SyntaxTokenLiteral | error { "expecting class field reference or token literal" };

rule ObjectFieldReference {
    captures {
        object_name = DefinedValue
        field_ref = FieldReference
    }
    object_name = DefinedValue
    operator .
    persist
    field_ref = FieldReference
}

variant Object = DefinedValue | BracedTokenStream | error { "expecting object" }; 
